package gameclient;import java.awt.Color;import java.awt.Dimension;import java.awt.Graphics;import java.awt.Toolkit;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.image.BufferedImage;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.Timer;public class Visualizer extends JFrame {    private ClientConnector ClientConnector;    private JLabel Viewfinder = new JLabel();    private Timer Timer = new Timer(40, new ActionListener() {        public void actionPerformed(ActionEvent e) {            UpdateGraphics();        }    });    private BufferedImage Visualization;    public Visualizer(ClientConnector cc) {        super();        try {            this.ClientConnector = cc;            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();            this.setBounds(0, 0, screenSize.width, screenSize.height);            this.setUndecorated(true);            this.setLayout(null);            this.setVisible(true);            this.Viewfinder.setBounds(0, 0, screenSize.width, screenSize.height);            this.Viewfinder.setVisible(true);            this.Viewfinder.setBackground(Color.black);            this.getContentPane().add(this.Viewfinder);            System.out.println("New visualizer created");            this.Visualization = CloneBackground();            this.Timer.start();        } catch (Exception e) {            e.printStackTrace();        }    }    public void UpdateGraphics() {        //Draw background        Graphics g2 = this.Viewfinder.getGraphics();        Graphics g1 = this.Visualization.getGraphics();        g1.drawImage(ClientConnector.getClientGameBoard().getBackground(), 0, 0, null);        //Draw nodes        g1.setColor(Color.white);        for (ClientNode n : ClientConnector.getClientGameBoard().getClientNodes()) {            int x = n.getScreenpoint().x;            int y = n.getScreenpoint().y;            g1.drawOval(x, y, 80, 40);        }        g2.drawImage(Visualization, 0, 0, null);    }    public BufferedImage CloneBackground() {        BufferedImage b = ClientConnector.getClientGameBoard().getBackground();        BufferedImage v = new BufferedImage(b.getWidth(), b.getHeight(), b.getType());        for (int x = 0; x < b.getWidth(); x++) {            for (int y = 0; y < b.getHeight(); y++) {                v.setRGB(x, y, b.getRGB(x, y));            }        }        return v;    }}